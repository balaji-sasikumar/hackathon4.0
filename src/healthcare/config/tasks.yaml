patient_intake_task:
  description: >
    You are responsible for collecting and structuring patient intake information.

    The input will include raw patient details: {patient_details}

    You must extract the following fields:
    - name
    - age
    - email
    - blood_pressure
    - sugar_level
    - symptoms (as an object with `primary_complaint` and `duration`)

    Once structured, wrap the output inside the following payload and call the tool `post_to_patient_api`:

    {
      "patient_api": "{patient_api}",
      "patient_data": {
        "email": "...",
        "age": ...,
        "blood_pressure": "...",
        "name": "...",
        "sugar_level": "...",
        "symptoms": {
          "primary_complaint": "...",
          "duration": "..."
        }
      }
    }
    Note: No stringification, no additional text, just the JSON payload.

    Ensure you return only valid JSON and include all fields.

  expected_output: >
    A JSON response from the `post_to_patient_api` tool confirming successful posting.
    Do not continue or generate your own response
  agent: intake_agent
basic_diagnosis_task:
  description: >
    You are an AI healthcare assistant providing basic diagnosis guidance.

    Based on {patient_details}, do the following:
    1. Assess the symptoms and health context
    2. Suggest general remedies
    3. If chronic conditions are involved, add a note of caution.
    4. End by asking the user if they would like to consult a doctor.

    Use this prompt
    "Would you like to book an appointment with a doctor?"
    Provide options:
      • Yes, I want to consult now
      • Yes, later is fine
      • No, I'm fine with this

    🚫 Do not handle scheduling or generate URLs. Only return advice and prompt.

  expected_output: >
    A brief diagnosis and remedy with the consultation prompt and the three options.
  agent: bot_doctor_agent

appointment_booking_task:
  description: >
    You manage appointment scheduling based on user responses in the full conversation in {patient_details}.

    Behavior:

    1. If the patient said: **"Yes, I want to consult now"**:
       - Use the `generate_live_consultation_link` tool.
       - Only return the consultation link in the final answer if the user chose to consult now. Do not email it
       - Set a flag `needs_email: false` in your output

    2. If the patient said: **"Yes, later is fine"**:
       - Call the `check_availability` tool with:
         {
           "availability_api": "{availability_api}",
           "doctor_and_date": {
             "doctorid": "doc123",
             "date": "2025-06-29"
           }
         }

       - From the result, filter time slots that are after the current time.
       - Display those slots to the user for selection.

       - Once the user selects a time, book the slot with the `book_appointment` tool using:
         {
           "appointment_api": "{appointment_api}",
           "appointment": {
             "doctorid": "doc123",
             "patientid": "pat456",
             "time": "selected_time"
           }
         }
       - Return a confirmation message with the booked time and notify them that they will receive a email.
       - Set a flag `needs_email: true` in your output

    3. If the patient said: **"No, I'm fine with this"**:
       - End the conversation politely without scheduling.
       - Set a flag `needs_email: false` in your output

  expected_output: >
    - If "now": live consultation link.
    - If "later": list slots and confirm booking.
    - If "no": simple, polite closure message.
  agent: appointment_agent

email_followup_task:
  description: >
    You are responsible for sending follow-up consultation links to patients who opted for "consult later".

    This task is conditionally executed by the Project Manager agent.

    From the {patient_details} context and the output of the appointment task:
    - Extract `email` of the patient
    - Use the `generate_live_consultation_link` tool to create a consultation link for the booked time.


    Your goal:
    - Compose a polite HTML email message that includes the generated consultation link.
    - Wrap it in this payload and use the `send_email` tool:

      {
           "email_api": "{email_api}",
           "email_data":{
              "email": "<patient_email>",
              "html_content": "<html>Your consultation link: <a href=<consultation link>>Join Here</a></html>"
          }
      }

    ⚠️ Notes:
    - Ensure the link is clearly clickable in the email body.
    - Maintain a professional tone.

  expected_output: >
    success confirmation from `send_email`.
  agent: email_agent
