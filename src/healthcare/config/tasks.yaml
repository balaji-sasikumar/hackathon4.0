patient_intake_task:
  description: >
    You are responsible for collecting and structuring patient intake information.

    The input will include raw patient details: {patient_details}

    You must extract the following fields:
    - name
    - age
    - email
    - blood_pressure
    - sugar_level
    - symptoms (as an object with `primary_complaint` and `duration`)

    Once structured, wrap the output inside the following payload and call the tool `post_to_patient_api`:

    {
      "patient_api": "{patient_api}",
      "patient_data": {
        "email": "...",
        "age": ...,
        "blood_pressure": "...",
        "name": "...",
        "sugar_level": "...",
        "symptoms": {
          "primary_complaint": "...",
          "duration": "..."
        }
      }
    }
    Note: No stringification, no additional text, just the JSON payload.

    Ensure you return only valid JSON and include all fields.

  expected_output: >
    A JSON response from the `post_to_patient_api` tool confirming successful posting.
    Do not continue or generate your own response
  agent: intake_agent
basic_diagnosis_task:
  description: >
    You are an AI healthcare assistant helping patients.

    Based on {patient_details}, perform the following:

    1. If the message is a fresh intake with symptoms, analyze and provide a remedy.

       After the remedy, ask the patient:
       - "Would you like to book an appointment with a doctor?"
       - Provide options:
         • "Yes, I want to consult now"
         • "Yes, later is fine"
         • "No, I'm fine with this"

       Output:
       {
         "diagnosis": "...",
         "appointment_choice": null
       }

    2. If the message is a reply like "Yes, I want to consult now", assume diagnosis was already given. In this case:

       - Generate a `roomId` using the `generate_live_consultation_link` tool.
       - Respond appropriately:
         • "now" → return the link
         • "later" → indicate it will be sent by email
         • "no" → close the conversation politely

       Output:
       {
         "diagnosis": "...",  # should be recalled from memory or prior input if possible
         "appointment_choice": "now" | "later" | "no",
         "roomId": "..."  # only for now or later
       }

  expected_output: >
    Strictly valid JSON with the diagnosis , appointment_choice and live_consultation_url without doctor name or time.
  agent: bot_doctor_agent
appointment_booking_task:
  description: >
    Ask the patient if they want to book an appointment. If yes, schedule it via hospital/doctor calendar API.
  expected_output: >
    Confirmed appointment details including time, date, and doctor name.
  agent: appointment_agent
# email_prescription_task:
#   description: >
#     Email the generated prescription or reports to the patient's registered email using a mailing API.
#   expected_output: >
#     Confirmation that the email was sent successfully with a copy of the email content.
#   agent: email_agent
# live_consultation_task:
#   description: >
#     Initiate a real-time chat or voice/video session between doctor and patient for live consultation.
#   expected_output: >
#     A link or interface to live session and confirmation that the call occurred.
#   agent: live_support_agent

# clinical_documentation_task:
#   description: >
#     Convert the live consultation conversation into structured clinical documentation.
#   expected_output: >
#     A structured report containing diagnosis, symptoms, and consultation summary.
#   agent: documentation_agent

# prescription_task:
#   description: >
#     Generate a prescription from the doctor's input and format it into a stylized HTML layout.
#   expected_output: >
#     A visually styled HTML prescription ready for emailing.
#   agent: prescription_agent

# agent_learning_task:
#   description: >
#     Store the patient case, remedy, and doctor’s prescription for training future recommendations using reinforcement learning.
#   expected_output: >
#     Case saved and registered for model retraining pipeline.
#   agent: rl_trainer_agent

# payment_task:
#   description: >
#     Collect payment from the patient using an integrated payment gateway API after consultation or prescription delivery.
#   expected_output: >
#     Payment confirmation with transaction ID and invoice.
#   agent: payment_agent

# support_task:
#   description: >
#     Handle follow-up queries, complaints, or technical issues from the patient.
#   expected_output: >
#     Resolution of the patient's issue or escalation to human support.
#   agent: support_agent
