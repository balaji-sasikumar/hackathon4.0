patient_intake_task:
  description: >
    You are responsible for collecting and structuring patient intake information.

    The input will include raw patient details: {patient_details}

    You must extract the following fields:
    - name
    - age
    - email
    - blood_pressure
    - sugar_level
    - symptoms (as an object with `primary_complaint` and `duration`)

    Once structured, wrap the output inside the following payload and call the tool `post_to_patient_api`:

    {
      "patient_api": "{patient_api}",
      "patient_data": {
        "email": "...",
        "age": ...,
        "blood_pressure": "...",
        "name": "...",
        "sugar_level": "...",
        "symptoms": {
          "primary_complaint": "...",
          "duration": "..."
        }
      }
    }
    Note: No stringification, no additional text, just the JSON payload.

    Ensure you return only valid JSON and include all fields.

  expected_output: >
    A JSON response from the `post_to_patient_api` tool confirming successful posting.
    Do not continue or generate your own response
  agent: intake_agent
basic_diagnosis_task:
  description: >
    You are an AI healthcare assistant providing basic diagnosis guidance.

    Based on {patient_details}, do the following:
    1. Assess the symptoms and health context
    2. Suggest general remedies
    3. If chronic conditions are involved, add a note of caution.
    4. End by asking the user if they would like to consult a doctor.

    Use this prompt after providing the diagnosis and remedies:
    "Would you like to book an appointment with a doctor?"
    Provide options:
      • Yes, I want to consult now
      • Yes, later is fine
      • No, I'm fine with this

    🚫 Do not handle scheduling or generate URLs. Only return advice and prompt.

  expected_output: >
    A brief diagnosis and remedy with the consultation prompt and the three options.
  agent: bot_doctor_agent

appointment_booking_task:
  description: >
    You manage appointment scheduling based on user responses in the full conversation in {patient_details}.

    Behavior:

    1. If the patient said: **"Yes, I want to consult now"**:
       - Use the `generate_live_consultation_link` tool.
       - Return only the consultation URL.

    2. If the patient said: **"Yes, later is fine"**:
       - Call the `check_availability` tool with:
         {
           "availability_api": "{availability_api}",
           "doctor_and_date": {
             "doctorid": "doc123",
             "date": "2025-06-29"
           }
         }

       - From the result, filter time slots that are after the current time.
       - Display those slots to the user for selection.

       - Once the user selects a time, book the slot with the `book_appointment` tool using:
         {
           "appointment_api": "{appointment_api}",
           "appointment": {
             "doctorid": "doc123",
             "patientid": "pat456",
             "time": "selected_time"
           }
         }
        From the {patient_details} context, extract:
        - `email` of the patient
        - previously generated live consultation URL (e.g., from earlier tasks)

        Your goal:
        - Compose a polite HTML email message that includes the consultation link.
        - Wrap it in the following payload and call the `send_email` tool:

          {
              "email_api": "{email_api}",
              "email_data":{
                  "email": "<patient_email>",
                  "html_content": "<html>Your consultation link: <a href='https://...'>Join Here</a></html>"
              }
          }

        ⚠️ Notes:
        - Ensure the link is clearly clickable in the email body.
        - Keep the tone supportive and professional.
        - Do not include unrelated content or raw logs.
       - Return a confirmation message with the booked time and notify them that they will receive a email.

    3. If the patient said: **"No, I'm fine with this"**:
       - End the conversation politely without scheduling.

  expected_output: >
    - If "now": live consultation link.
    - If "later": list slots and confirm booking.
    - If "no": simple, polite closure message.
  agent: appointment_agent
# email_followup_task:
#   description: >
#     You are responsible for sending follow-up consultation links to patients who opted for "consult later".

#     From the {patient_details} context, extract:
#     - `email` of the patient
#     - previously generated live consultation URL (e.g., from earlier tasks)

#     Your goal:
#     - Compose a polite HTML email message that includes the consultation link.
#     - Wrap it in the following payload and call the `send_email` tool:

#       {
#            "email_api": "{email_api}",
#            "email_data":{
#               "email": "<patient_email>",
#               "html_content": "<html>Your consultation link: <a href='https://...'>Join Here</a></html>"
#           }
#       }

#     ⚠️ Notes:
#     - Ensure the link is clearly clickable in the email body.
#     - Keep the tone supportive and professional.
#     - Do not include unrelated content or raw logs.

#   expected_output: >
#     A success confirmation message from the `send_email` tool.
#   agent: email_agent
#   context: [appointment_booking_task]
# email_prescription_task:
#   description: >
#     Email the generated prescription or reports to the patient's registered email using a mailing API.
#   expected_output: >
#     Confirmation that the email was sent successfully with a copy of the email content.
#   agent: email_agent
# live_consultation_task:
#   description: >
#     Initiate a real-time chat or voice/video session between doctor and patient for live consultation.
#   expected_output: >
#     A link or interface to live session and confirmation that the call occurred.
#   agent: live_support_agent

# clinical_documentation_task:
#   description: >
#     Convert the live consultation conversation into structured clinical documentation.
#   expected_output: >
#     A structured report containing diagnosis, symptoms, and consultation summary.
#   agent: documentation_agent

# prescription_task:
#   description: >
#     Generate a prescription from the doctor's input and format it into a stylized HTML layout.
#   expected_output: >
#     A visually styled HTML prescription ready for emailing.
#   agent: prescription_agent

# agent_learning_task:
#   description: >
#     Store the patient case, remedy, and doctor’s prescription for training future recommendations using reinforcement learning.
#   expected_output: >
#     Case saved and registered for model retraining pipeline.
#   agent: rl_trainer_agent

# payment_task:
#   description: >
#     Collect payment from the patient using an integrated payment gateway API after consultation or prescription delivery.
#   expected_output: >
#     Payment confirmation with transaction ID and invoice.
#   agent: payment_agent

# support_task:
#   description: >
#     Handle follow-up queries, complaints, or technical issues from the patient.
#   expected_output: >
#     Resolution of the patient's issue or escalation to human support.
#   agent: support_agent
